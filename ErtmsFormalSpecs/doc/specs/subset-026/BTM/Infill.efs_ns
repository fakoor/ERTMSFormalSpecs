<NameSpace
 X="150"
 Y="80"
 Width="100"
 Height="50"
 Name="Infill"
 Guid="2dc6aea7-522b-4955-b8d5-f0b2710c2a41"
>
<Comment>Common functions for infill packets treatment.</Comment>
<NameSpaces>
</NameSpaces>
<Functions>
<Function
 Type="Messages.EUROBALISE.Message"
 Default=""
 X="10"
 Y="10"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="CurrentInfillTelegram"
 Guid="345f7dc8-70e7-45e7-88c8-015a916f201e"
>
<ReqRef
 Id="d0998160-1f71-42dd-b9e9-ca9b69a73225"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="1a42e29d-825d-46c6-bab1-ab10d9cd6fcc"
>
</ReqRef><Comment>This function extracts the infill (or non-infill) packets of the 
CurrentBaliseGroup. It returns a collection of StoredBaliseStructs whose
 length is the same as the original one. Returned 
StoredBaliseStruct.Telegram.Sequence1 may be empty if the original 
BaliseGroupMessage contains no infill packet.
Note that there may be at most two INFILL_LOCATION_REFERENCE packet per 
telegram, one for each direction. This function returns only infilled packet 
for the forward direction.</Comment>
<Parameters>
<Parameter
 Type="Boolean"
 Name="selectInfill"
 Guid="a410b36f-98ba-4ff1-ba24-ec7d724893d2"
>
</Parameter><Parameter
 Type="Messages.EUROBALISE.Message"
 Name="aTelegram"
 Guid="149b456c-98a9-466b-a155-d25b228cb4ed"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="No balise message received"
 Guid="579e0998-5f81-4e98-ad90-12cf2975aa6f"
>
<PreConditions>
<PreCondition
 Guid="bc124490-4459-40e2-a267-9dbf459096a0"
>aTelegram == EMPTY</PreCondition></PreConditions>
<Expression>EMPTY</Expression>
</Case><Case
 Name="Infilled packets"
 Guid="daf9e1c6-60ae-41cc-ae5f-77b7bb761760"
>
<Comment>If the first INFILL_LOCATION_REFERENCE packet gives infill information for 
the forward direction, the second, if any, can give information for the 
backward direction only. Hence one must in this case consider packets in 
between the two infill packets. On the other hand, if the first gives infill 
information for the reverse orientation, one must consider packets after the 
second infill_location_reference packet.</Comment>
<PreConditions>
<PreCondition
 Guid="4daecc79-b0e4-4151-bcd8-0c91a60bc5f8"
>selectInfill</PreCondition></PreConditions>
<Expression>CutAtFirstInfillPacket(CutAtFirstInfillPacket(
    aTelegram =&gt; aTelegram,
    AfterFirstInfillPacket =&gt; True),
AfterFirstInfillPacket =&gt; NOT Infill.IsDataDirectionForward(Infill.DirectionOfFirstInfillPacket(aTelegram))
)</Expression>
</Case><Case
 Name="Non-Infilled packets"
 Guid="0339a595-8979-4935-9b10-ac89032a1a69"
>
<Expression>CutAtFirstInfillPacket(
    aTelegram =&gt; aTelegram,
    AfterFirstInfillPacket =&gt; False
)</Expression>
</Case></Cases>
</Function><Function
 Type="Messages.NID_BG"
 Default=""
 X="120"
 Y="70"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="InfillReferenceNID"
 Guid="d616b1b9-4d8e-42c1-a4e4-472a334dc8dc"
>
<ReqRef
 Id="3d5f5d1a-384b-4310-bf6b-e35579ea0ee5"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="7d14b228-985e-474d-b752-de0ea25b51f7"
>
</ReqRef><ReqRef
 Id="bd3f7106-e2c1-465f-be7e-f47543c5f94b"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="33baf702-1e58-48ac-a1fd-9cac365aaebb"
>
</ReqRef><ReqRef
 Id="55512f96-4453-4790-88cb-a4324c3a4a22"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="a198a735-40d2-4196-a705-40c3dad4e0e8"
>
</ReqRef><Comment>Get the NID of the referenced BG. Note : the linking information is not necessarily transmitted by the same balise, hence it has to be recovered another way.</Comment>
<Cases>
<Case
 Name="InfillReferenceBG"
 Guid="0d03886e-1bf0-4268-b438-46c70c2cf6ea"
>
<PreConditions>
<PreCondition
 Guid="8303432e-05ce-4832-a8e2-085405b35411"
>Available(GetPacketWithInfill( GetTelegramWithInfill(CurrentBaliseGroup)))</PreCondition></PreConditions>
<Expression>GetPacketWithInfill( GetTelegramWithInfill(CurrentBaliseGroup)).TRACK_TO_TRAIN.INFILL_LOCATION_REFERENCE.NID_BG</Expression>
</Case><Case
 Name="Otherwise"
 Guid="e0c59638-25ef-405a-bd5c-c201d3d0528f"
>
<Expression>Messages.NID_BG.NID_UNKNOWN</Expression>
</Case></Cases>
</Function><Function
 Type="Messages.EUROBALISE.Message"
 Default=""
 X="250"
 Y="110"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="CutAtFirstInfillPacket"
 Guid="ab3f4922-57f0-46a2-aeed-95e630fa0032"
>
<ReqRef
 Id="d0998160-1f71-42dd-b9e9-ca9b69a73225"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="2b5e89f2-337f-458f-a206-9566e6740768"
>
</ReqRef><Comment>Convenience function. Returns a balise telegram containing packets located after or before the first infill_location_reference packet encountered in aTelegram.Sequence1.</Comment>
<Parameters>
<Parameter
 Type="Messages.EUROBALISE.Message"
 Name="aTelegram"
 Guid="b596216e-67e8-40af-b09a-1783db126343"
>
</Parameter><Parameter
 Type="Boolean"
 Name="AfterFirstInfillPacket"
 Guid="53c5c3b9-f274-47bb-ba26-818e54306ad0"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Telegram contains no packet"
 Guid="8dd25b90-41a4-4fe4-8c0e-7e524f7a1900"
>
<Comment>If there is no packet in the telegram, simply returns the original telegram.</Comment>
<PreConditions>
<PreCondition
 Guid="fc7fd699-bb83-4cbd-ba12-cd9e314cd023"
>aTelegram.Sequence1 == []</PreCondition></PreConditions>
<Expression>aTelegram</Expression>
</Case><Case
 Name="Packets after first INFILL_LOCATION_REFERENCE packet"
 Guid="0e316a43-9bc3-4f22-95a9-a02fdf61c622"
>
<Comment>There is an infill_location_reference packet. Packets strictly after this infill_location_reference packet are returned.</Comment>
<PreConditions>
<PreCondition
 Guid="38b28c45-a5a6-406c-a047-df4a097b2492"
>THERE_IS W IN aTelegram.Sequence1 | Available(W.TRACK_TO_TRAIN.INFILL_LOCATION_REFERENCE)</PreCondition><PreCondition
 Guid="a6674c35-62f2-4668-81e5-777dc7e9fcb4"
>AfterFirstInfillPacket</PreCondition></PreConditions>
<Expression>Messages.EUROBALISE.Message
{
  Q_UPDOWN =&gt; aTelegram.Q_UPDOWN, 
  M_VERSION =&gt; aTelegram.M_VERSION, 
  Q_MEDIA =&gt;aTelegram.Q_MEDIA, 
  N_PIG =&gt; aTelegram.N_PIG, 
  N_TOTAL =&gt; aTelegram.N_TOTAL, 
  M_DUP =&gt; aTelegram.M_DUP, 
  M_MCOUNT =&gt; aTelegram.M_MCOUNT, 
  NID_C =&gt; aTelegram.NID_C, 
  NID_BG =&gt; aTelegram.NID_BG, 
  Q_LINK =&gt; aTelegram.Q_LINK, 
  Sequence1 =&gt;  FILTER aTelegram.Sequence1 | 
(
Before(
    ExpectedFirst =&gt; FIRST V IN aTelegram.Sequence1 | 
                Available(V.TRACK_TO_TRAIN.INFILL_LOCATION_REFERENCE) ,
    ExpectedSecond =&gt; X,
    Collection =&gt; aTelegram.Sequence1 
    )
)
USING X, 
  BitField =&gt; &apos;&apos;
}</Expression>
</Case><Case
 Name="Packets before first INFILL_LOCATION_REFERENCE packet"
 Guid="46bcae9b-9a70-423b-8362-7c0ef4adc297"
>
<Comment>There is an infill_location_reference packet. Packets strickly before this one are returned.</Comment>
<PreConditions>
<PreCondition
 Guid="aa6e17c2-b766-43ba-9da9-8f1fa6b18823"
>THERE_IS W IN aTelegram.Sequence1 | Available(W.TRACK_TO_TRAIN.INFILL_LOCATION_REFERENCE)</PreCondition><PreCondition
 Guid="7a5ca06a-62f6-4adb-8439-990fc1329be0"
>NOT AfterFirstInfillPacket</PreCondition></PreConditions>
<Expression>Messages.EUROBALISE.Message
{
  Q_UPDOWN =&gt; aTelegram.Q_UPDOWN, 
  M_VERSION =&gt; aTelegram.M_VERSION, 
  Q_MEDIA =&gt;aTelegram.Q_MEDIA, 
  N_PIG =&gt; aTelegram.N_PIG, 
  N_TOTAL =&gt; aTelegram.N_TOTAL, 
  M_DUP =&gt; aTelegram.M_DUP, 
  M_MCOUNT =&gt; aTelegram.M_MCOUNT, 
  NID_C =&gt; aTelegram.NID_C, 
  NID_BG =&gt; aTelegram.NID_BG, 
  Q_LINK =&gt; aTelegram.Q_LINK, 
  Sequence1 =&gt;  FILTER aTelegram.Sequence1 | 
(
Before(
    ExpectedFirst =&gt; X ,
    ExpectedSecond =&gt; FIRST V IN aTelegram.Sequence1 | 
                Available(V.TRACK_TO_TRAIN.INFILL_LOCATION_REFERENCE) ,
    Collection =&gt; aTelegram.Sequence1 
    )
)
USING X, 
  BitField =&gt; &apos;&apos;
}</Expression>
</Case><Case
 Name="Packets after a non existing INFILL_LOCATION_REFERENCE packet"
 Guid="a0134d5d-a8b0-48ad-b9c1-8a4028c0a9e2"
>
<Comment>Returns a telegram with an empty packet collection if required to return packets after the first infill_location_reference packet while there is no such packet.</Comment>
<PreConditions>
<PreCondition
 Guid="25c6c6e1-6a6e-4b41-b7d9-52015671a961"
>AfterFirstInfillPacket</PreCondition></PreConditions>
<Expression>Messages.EUROBALISE.Message
{
  Q_UPDOWN =&gt; aTelegram.Q_UPDOWN, 
  M_VERSION =&gt; aTelegram.M_VERSION, 
  Q_MEDIA =&gt;aTelegram.Q_MEDIA, 
  N_PIG =&gt; aTelegram.N_PIG, 
  N_TOTAL =&gt; aTelegram.N_TOTAL, 
  M_DUP =&gt; aTelegram.M_DUP, 
  M_MCOUNT =&gt; aTelegram.M_MCOUNT, 
  NID_C =&gt; aTelegram.NID_C, 
  NID_BG =&gt; aTelegram.NID_BG, 
  Q_LINK =&gt; aTelegram.Q_LINK, 
  Sequence1 =&gt; [], 
  BitField =&gt; &apos;&apos;
}</Expression>
</Case><Case
 Name="Packets before a non-existing INFILL_LOCATION_REFERENCE packet"
 Guid="c1b32ea2-b58f-439f-bd71-265f28c2893f"
>
<Comment>Returns the full telegram if required to return packets before the first infill_location_reference packet while there is no such packet.</Comment>
<PreConditions>
<PreCondition
 Guid="dec60907-c99e-4299-bef5-e08305f56a49"
>NOT AfterFirstInfillPacket</PreCondition></PreConditions>
<Expression>Messages.EUROBALISE.Message
{
  Q_UPDOWN =&gt; aTelegram.Q_UPDOWN, 
  M_VERSION =&gt; aTelegram.M_VERSION, 
  Q_MEDIA =&gt;aTelegram.Q_MEDIA, 
  N_PIG =&gt; aTelegram.N_PIG, 
  N_TOTAL =&gt; aTelegram.N_TOTAL, 
  M_DUP =&gt; aTelegram.M_DUP, 
  M_MCOUNT =&gt; aTelegram.M_MCOUNT, 
  NID_C =&gt; aTelegram.NID_C, 
  NID_BG =&gt; aTelegram.NID_BG, 
  Q_LINK =&gt; aTelegram.Q_LINK, 
  Sequence1 =&gt; aTelegram.Sequence1, 
  BitField =&gt; &apos;&apos;
}</Expression>
</Case></Cases>
</Function><Function
 Type="Messages.Q_DIR"
 Default=""
 X="10"
 Y="70"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="DirectionOfFirstInfillPacket"
 Guid="f9a3b3a2-b695-4143-ac57-933e8dfe50bd"
>
<ReqRef
 Id="d0998160-1f71-42dd-b9e9-ca9b69a73225"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="76f720fa-9697-4c9e-8f6a-10bd477bfdc6"
>
</ReqRef><Comment>Gives the direction of validity of the infill packet w.r.t. the balise group orientation.</Comment>
<Parameters>
<Parameter
 Type="Messages.EUROBALISE.Message"
 Name="aTelegram"
 Guid="5074bb3c-cf83-4978-862a-a3d8fc40c3e6"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="There is an INFILL_LOCATION_REFERENCE packet"
 Guid="0682c5fb-72a8-4d00-810a-27bd1c4cb90d"
>
<PreConditions>
<PreCondition
 Guid="486c890b-0bfc-4ac8-a9a1-d640ded5d5dc"
>THERE_IS W IN aTelegram.Sequence1 | Available(W.TRACK_TO_TRAIN.INFILL_LOCATION_REFERENCE)</PreCondition></PreConditions>
<Expression>(FIRST X IN aTelegram.Sequence1 | 
Available(X.TRACK_TO_TRAIN.INFILL_LOCATION_REFERENCE)).TRACK_TO_TRAIN.INFILL_LOCATION_REFERENCE.Q_DIR</Expression>
</Case><Case
 Name="Otherwise"
 Guid="23147208-7ef8-419e-bf88-613d36d2febb"
>
<Expression>Messages.Q_DIR.Spare</Expression>
</Case></Cases>
</Function><Function
 Type="Boolean"
 Default=""
 X="250"
 Y="10"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="IsDataDirectionForward"
 Guid="d4e7d286-ca38-42ae-8fae-7363b22e4ca2"
>
<ReqRef
 Id="d0998160-1f71-42dd-b9e9-ca9b69a73225"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="c376876d-1ff4-4e8e-b9b8-56a4071996db"
>
</ReqRef><Comment>Tells whether the infill information concerns forward movements and hence should be considered.</Comment>
<Parameters>
<Parameter
 Type="Messages.Q_DIR"
 Name="aDataDirection"
 Guid="25e65e8c-13e1-4a0a-9761-7940afccd3a5"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
 Guid="7cb3b1e6-b505-4a89-a3cd-ef5cb90fbdc3"
>
<Expression>aDataDirection == EFSOrientationConverter(BGOrientation(CurrentBaliseGroup))</Expression>
</Case></Cases>
</Function><Function
 Type="Messages.EUROBALISE.Message"
 Default=""
 X="10"
 Y="150"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="GetTelegramWithInfill"
 Guid="c8057362-7b44-4877-a9b1-2f4ccaa70065"
>
<Comment>Convenience function. Finds the first telegram in a balise group that contains an INFILL_LOCATION_REFERENCE packet with the right orientation.</Comment>
<Parameters>
<Parameter
 Type="BaliseGroupMessagesCol"
 Name="aBG"
 Guid="a02711c2-7e42-472e-ad5d-d0e5df9cbb62"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
 Guid="c6be2e2e-d450-4166-8e58-bb221cee0892"
>
<Expression>(
FIRST X IN aBG |
(
THERE_IS V IN X.Telegram.Sequence1 | 
(
Available(V.TRACK_TO_TRAIN.INFILL_LOCATION_REFERENCE)
AND
IsDataDirectionForward(V.TRACK_TO_TRAIN.INFILL_LOCATION_REFERENCE.Q_DIR)
)
)
).Telegram</Expression>
</Case></Cases>
</Function><Function
 Type="Messages.EUROBALISE.SubStructure1"
 Default=""
 X="120"
 Y="150"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="GetPacketWithInfill"
 Guid="1758c8a5-71ed-4c23-8ceb-30c2e5c6ccbb"
>
<Comment>Convenience function. Gets the packet INFILL_LOCATION_REFERENCE (with the right orientation) in a telegram.</Comment>
<Parameters>
<Parameter
 Type="Messages.EUROBALISE.Message"
 Name="aTelegram"
 Guid="5c51d3b4-5f90-435c-94d6-8a116f384c84"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
 Guid="d073b891-fc3a-422a-bda4-f5748842c88d"
>
<Expression>FIRST V IN aTelegram.Sequence1 | 
(
Available(V.TRACK_TO_TRAIN.INFILL_LOCATION_REFERENCE)
AND
IsDataDirectionForward(V.TRACK_TO_TRAIN.INFILL_LOCATION_REFERENCE.Q_DIR)
)</Expression>
</Case></Cases>
</Function><Function
 Type="BaseTypes.Distance"
 Default=""
 X="120"
 Y="10"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="DistanceToInfillReference"
 Guid="167138b4-94c8-49ab-aaa6-4768af9babfe"
>
<ReqRef
 Id="bd3f7106-e2c1-465f-be7e-f47543c5f94b"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="932c1b02-523b-41f7-81be-af53b62e7a11"
>
</ReqRef><ReqRef
 Id="3d5f5d1a-384b-4310-bf6b-e35579ea0ee5"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="625e80d8-f70e-4857-8ea6-a4cd48db954e"
>
</ReqRef><Comment>Returns the distance to the infill reference balise group, unknown if it is not linked.</Comment>
<Cases>
<Case
 Name="Value"
 Guid="78467c4c-05a7-4d95-bae9-87aee3eae345"
>
<Expression>BTM.Linking.DistanceToBaliseGroup(BTM.Infill.InfillReferenceNID())</Expression>
</Case></Cases>
</Function></Functions>
</NameSpace>
