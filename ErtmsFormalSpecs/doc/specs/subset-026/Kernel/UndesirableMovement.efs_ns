<NameSpace
 X="670"
 Y="70"
 Width="100"
 Height="50"
 Name="UndesirableMovement"
 Guid="21615eb6-5dd2-475d-b531-5fcb3bcb7cea"
>
<NameSpaces>
</NameSpaces>
<Functions>
<Function
 Type="Boolean"
 Default=""
 X="10"
 Y="230"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="MovementDetected"
 Guid="823c8ccb-f306-4311-a3c2-e6a899955127"
>
<Comment>Indicates whether the train detected any movement in the current cycle.</Comment>
<Cases>
<Case
 Name="Value"
 Guid="4ec20176-f892-4503-863a-fe3d97a8e325"
>
<Expression>NOT Odometry.TrainIsAtStandstill()</Expression>
</Case></Cases>
</Function><Function
 Type="Boolean"
 Default=""
 X="120"
 Y="230"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="RollAwayMovementDetected"
 Guid="c64922f5-2092-423b-8647-32ba492c6078"
>
<ReqRef
 Id="507e945d-af5e-4721-af02-3f87008198c9"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="5c4a626a-7870-4078-b9f9-6613e20b25e4"
>
</ReqRef><ReqRef
 Id="6f923071-4cba-403c-9510-8aa3b5a4d6c2"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="b1d6ea76-2ffb-431b-969a-c0e3720b1796"
>
</ReqRef><ReqRef
 Id="1058129e-e8d2-4dda-992f-3f44ebb4a754"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="c275eec0-1da1-4600-b42f-97d8cb0201a4"
>
</ReqRef><ReqRef
 Id="6f89de18-e407-4737-90cf-efd9d8a3b178"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="2ddf3019-77ea-4e37-9560-757e0b06d52d"
>
</ReqRef><Comment>Indicates whether the conditions to trigger a brake command due to the roll away protection have been fulfilled.</Comment>
<Parameters>
<Parameter
 Type="BaseTypes.Distance"
 Name="aReferenceDistance"
 Guid="d1fb43b7-a014-4b7c-8685-058ea727edfd"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Direction controller in Neutral"
 Guid="cb8203ba-93fa-4bd9-a996-e08256c6db55"
>
<PreConditions>
<PreCondition
 Guid="97d9a3ea-c214-4b26-aa7b-693ecba1ffc5"
>TIU.DirectionControllerInformation == TIU.DirectionControllerEnum.Neutral</PreCondition></PreConditions>
<Expression>aReferenceDistance - Odometry.NominalDistance != 0.0</Expression>
</Case><Case
 Name="Direction controller in forward"
 Guid="7cf9f355-4388-430f-a696-2f039b3e2d06"
>
<PreConditions>
<PreCondition
 Guid="2f2dc6ce-2437-470c-99df-8941fafd463e"
>TIU.DirectionControllerInformation == TIU.DirectionControllerEnum.Forward</PreCondition></PreConditions>
<Expression>aReferenceDistance - Odometry.NominalDistance &gt; 0.0</Expression>
</Case><Case
 Name="Direction controller in backward"
 Guid="0ab5651a-90d3-4a02-97b6-ce3d69a9b1da"
>
<PreConditions>
<PreCondition
 Guid="58a98f42-a2c6-4a27-a041-eaee8e274c43"
>TIU.DirectionControllerInformation == TIU.DirectionControllerEnum.Backward</PreCondition></PreConditions>
<Expression>Odometry.NominalDistance - aReferenceDistance &gt; 0.0</Expression>
</Case></Cases>
</Function><Function
 Type="Boolean"
 Default=""
 X="230"
 Y="170"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="MovedForwardBeyondReference"
 Guid="9d35ef6f-3dc9-4db7-aa69-499e7a9c76b5"
>
<ReqRef
 Id="507e945d-af5e-4721-af02-3f87008198c9"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="ddaadd71-d00a-4429-b445-5acb745d1ffd"
>
</ReqRef><ReqRef
 Id="1058129e-e8d2-4dda-992f-3f44ebb4a754"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="20e3d9ea-960d-42ee-bcba-093eb9dfab2a"
>
</ReqRef><Comment>Checks that the train moved forwards beyond the national value for the allowed roll away distance.</Comment>
<Parameters>
<Parameter
 Type="BaseTypes.Distance"
 Name="aReferenceDistance"
 Guid="9981e2a6-0170-4881-b540-75c56454cd7e"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Value"
 Guid="26801c08-367c-4d0b-8c3c-6be74e9ea508"
>
<Expression>Odometry.NominalDistance - aReferenceDistance &gt; Kernel.NationalValues.ApplicableNationalValues.Value.DistToBeUsedInRollAwayProt_RevMvtProt_StandstillSup</Expression>
</Case></Cases>
</Function><Function
 Type="Boolean"
 Default=""
 X="340"
 Y="170"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="MovedBackwardBeyondReference"
 Guid="d68e14b1-3f53-424b-b2ae-6876d9550c98"
>
<ReqRef
 Id="507e945d-af5e-4721-af02-3f87008198c9"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="fc00d10a-8496-4752-946a-53fc48b05706"
>
</ReqRef><ReqRef
 Id="1058129e-e8d2-4dda-992f-3f44ebb4a754"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="10ece08b-ef61-4f57-ace9-76ac6c878a6a"
>
</ReqRef><ReqRef
 Id="31365cae-7dc0-4858-90da-11d6ffeaacef"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="333baf67-8c16-4da3-a679-858f5db3217e"
>
</ReqRef><ReqRef
 Id="b596a179-fa52-42d4-92cc-16da956cad47"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="65df945a-c8eb-49de-bd69-1e311492b1ec"
>
</ReqRef><Comment>Checks that the train moved backwards beyond the national value for the allowed roll away distance.</Comment>
<Parameters>
<Parameter
 Type="BaseTypes.Distance"
 Name="aReferenceDistance"
 Guid="a517e202-66a1-452d-9026-11849fd08ae0"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Reversing mode"
 Guid="147fc84c-d166-41f7-a3de-26c6ef999b5d"
>
<PreConditions>
<PreCondition
 Guid="cc1b9283-1c87-4432-8dbe-c2fd0ccd3330"
>Kernel.Mode == ModeEnum.RV</PreCondition></PreConditions>
<Expression>Odometry.NominalDistance - aReferenceDistance &gt; Kernel.NationalValues.ApplicableNationalValues.Value.DistToBeUsedInRollAwayProt_RevMvtProt_StandstillSup</Expression>
</Case><Case
 Name="Otherwise"
 Guid="cece71ce-efaa-45fe-b7c5-6e2603442a61"
>
<Expression>aReferenceDistance - Odometry.NominalDistance &gt; Kernel.NationalValues.ApplicableNationalValues.Value.DistToBeUsedInRollAwayProt_RevMvtProt_StandstillSup</Expression>
</Case></Cases>
</Function><Function
 Type="Boolean"
 Default=""
 X="230"
 Y="230"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="ReverseDistanceExceeded"
 Guid="1eae931b-97b2-44f2-8b27-7a7a41f66bb4"
>
<ReqRef
 Id="564c8eaf-9eff-4fcc-a1ab-b4c80a278e54"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="2d61d409-ad84-48de-80fb-84e60c45c5a3"
>
</ReqRef><ReqRef
 Id="3dcd2c27-a8e0-48b8-93e4-915c7943633f"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="3684f0cd-cd37-4edb-aaf1-69a5cfc2f4be"
>
</ReqRef><ReqRef
 Id="cf125334-c2c0-4fcc-91c8-a060267517e1"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="ec9b3f79-7186-4b25-8283-5b65db3b5a17"
>
</ReqRef><ReqRef
 Id="31365cae-7dc0-4858-90da-11d6ffeaacef"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="a81ac085-cedc-4e24-838e-cbd086f22b2c"
>
</ReqRef><Comment>Indicates whether the conditions to trigger a brake command due to the reverse movement protection have been fulfilled.</Comment>
<Cases>
<Case
 Name="Value"
 Guid="1477ed66-aaf4-4fd3-9194-20a75ac62200"
>
<Expression>Kernel.UndesirableMovement.MovedBackwardBeyondReference(Kernel.UndesirableMovement.ReverseMovementReferencePosition)</Expression>
</Case></Cases>
</Function><Function
 Type="Boolean"
 Default=""
 X="120"
 Y="170"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="StandstillDistanceExceeded"
 Guid="edb4b866-360e-4e46-b4a9-6bf9159e7c5b"
>
<ReqRef
 Id="c4a4386b-4dc3-4967-aaef-4485fe5a5adf"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="0ff180a8-e12c-460b-aa1f-138d1f93f8f0"
>
</ReqRef><ReqRef
 Id="b883cf61-7caf-4980-becb-9096c165864d"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="d41d414b-803c-4d65-a7e7-503a6cd3d8cf"
>
</ReqRef><Comment>Indicates whether the conditions to trigger a brake command due to the standstill supervision have been fulfilled.</Comment>
<Cases>
<Case
 Name="No movement detected"
 Guid="7a307d27-6d9e-4181-8f6f-063851763497"
>
<PreConditions>
<PreCondition
 Guid="5267c232-0ef1-4ed7-a47a-95f7de2bd8bc"
>NOT Kernel.UndesirableMovement.MovementDetected()
  OR  
Kernel.UndesirableMovement.StandstillSupervisionReferencePosition == BaseTypes.Distance.Unknown</PreCondition></PreConditions>
<Expression>False</Expression>
</Case><Case
 Name="Value"
 Guid="90ecb707-a5e6-42a3-bf2a-91215f3a0ff0"
>
<Expression>Kernel.UndesirableMovement.MovedBackwardBeyondReference(Kernel.UndesirableMovement.StandstillSupervisionReferencePosition)
  OR  
Kernel.UndesirableMovement.MovedForwardBeyondReference(Kernel.UndesirableMovement.StandstillSupervisionReferencePosition)</Expression>
</Case></Cases>
</Function><Function
 Type="Boolean"
 Default=""
 X="10"
 Y="230"
 Width="100"
 Height="50"
 Implemented="TRUE"
 NeedsRequirement="FALSE"
 Name="ReverseMovementDetected"
 Guid="53f66f1e-470f-4c8c-8dcf-4890c31a397a"
>
<Comment>Indicates whether the train detected any movement in the current cycle.</Comment>
<Parameters>
<Parameter
 Type="BaseTypes.Distance"
 Name="aReferenceDistance"
 Guid="e0739573-fa68-4c29-bf72-6599281124a5"
>
</Parameter></Parameters>
<Cases>
<Case
 Name="Reversing mode"
 Guid="5fb606db-eb04-421a-b669-eacb34a9c0d9"
>
<PreConditions>
<PreCondition
 Guid="b637bd5d-b539-45b5-ad4b-b3aeec79ae48"
>Kernel.Mode == ModeEnum.RV</PreCondition></PreConditions>
<Expression>Odometry.NominalDistance - aReferenceDistance &gt; 0.0</Expression>
</Case><Case
 Name="Otherwise"
 Guid="3cca33cd-f2b4-41d6-80a6-f743238df421"
>
<Expression>aReferenceDistance - Odometry.NominalDistance &gt; 0.0</Expression>
</Case></Cases>
</Function><Function
 Type="Boolean"
 Default=""
 X="120"
 Y="230"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="RollAwayDistanceExceeded"
 Guid="f9f576fe-a388-4f3f-8dd5-10100d5e27c7"
>
<ReqRef
 Id="507e945d-af5e-4721-af02-3f87008198c9"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="763f7766-723c-4da6-b45a-7213a2f6365d"
>
</ReqRef><ReqRef
 Id="6f923071-4cba-403c-9510-8aa3b5a4d6c2"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="ab1844c4-5174-46c3-8235-df7f05d68151"
>
</ReqRef><ReqRef
 Id="1058129e-e8d2-4dda-992f-3f44ebb4a754"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="0f01168f-d9ab-4990-96b8-70e30ba446a6"
>
</ReqRef><Comment>Indicates whether the conditions to trigger a brake command due to the roll away protection have been fulfilled.</Comment>
<Cases>
<Case
 Name="Direction controller in Neutral"
 Guid="493cfe9d-4379-42c2-ba6a-22f3da13b4f9"
>
<PreConditions>
<PreCondition
 Guid="efe6c87e-30a4-4860-b0e1-541105a3d196"
>TIU.DirectionControllerInformation == TIU.DirectionControllerEnum.Neutral</PreCondition></PreConditions>
<Expression>(Odometry.NominalDistance - Kernel.UndesirableMovement.RollAwayMovementReferencePosition &gt;Kernel.NationalValues.ApplicableNationalValues.Value.DistToBeUsedInRollAwayProt_RevMvtProt_StandstillSup)
  OR  
(Kernel.UndesirableMovement.RollAwayMovementReferencePosition - Odometry.NominalDistance &gt;Kernel.NationalValues.ApplicableNationalValues.Value.DistToBeUsedInRollAwayProt_RevMvtProt_StandstillSup)</Expression>
</Case><Case
 Name="Direction controller in forward"
 Guid="125749c0-698b-44eb-b30b-e2cfe24344ea"
>
<PreConditions>
<PreCondition
 Guid="a8da17ac-472c-4f65-a3f5-2e4e00978249"
>TIU.DirectionControllerInformation == TIU.DirectionControllerEnum.Forward</PreCondition></PreConditions>
<Expression>Kernel.UndesirableMovement.RollAwayMovementReferencePosition - Odometry.NominalDistance &gt;Kernel.NationalValues.ApplicableNationalValues.Value.DistToBeUsedInRollAwayProt_RevMvtProt_StandstillSup</Expression>
</Case><Case
 Name="Direction controller in backward"
 Guid="ef7049c3-4c8b-4922-a545-ad76b1a26d1d"
>
<PreConditions>
<PreCondition
 Guid="d264d10d-2834-40a9-8d4a-fa0acbf240b5"
>TIU.DirectionControllerInformation == TIU.DirectionControllerEnum.Backward</PreCondition></PreConditions>
<Expression>Odometry.NominalDistance - Kernel.UndesirableMovement.RollAwayMovementReferencePosition &gt; Kernel.NationalValues.ApplicableNationalValues.Value.DistToBeUsedInRollAwayProt_RevMvtProt_StandstillSup</Expression>
</Case></Cases>
</Function></Functions>
<Variables>
<Variable
 Type="BaseTypes.Distance"
 DefaultValue="0.0"
 VariableMode="Internal"
 X="10"
 Y="10"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="RollAwayMovementReferencePosition"
 Guid="8144b376-47f6-4524-86cb-9381567478a6"
>
<ReqRef
 Id="1058129e-e8d2-4dda-992f-3f44ebb4a754"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="b5afbf71-6588-4a61-88c1-55ccf9b95469"
>
</ReqRef><ReqRef
 Id="5b878cb7-bb66-41bb-96dc-6089f53c8f01"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="dc063880-cc0e-4e04-adfe-600d0a171798"
>
</ReqRef><ReqRef
 Id="507e945d-af5e-4721-af02-3f87008198c9"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="4a9ce2d8-f0f1-4cad-a9a8-f2c535c4eb52"
>
</ReqRef><Comment>Tracks the reference location for roll away protection.
When the roll away protection is inactive, it is set to the unknown distance.</Comment>
</Variable><Variable
 Type="BaseTypes.Distance"
 DefaultValue="0.0"
 VariableMode="Internal"
 X="120"
 Y="10"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="ReverseMovementReferencePosition"
 Guid="a1939a75-dc81-4c9d-a4eb-a36b4cd4cc6d"
>
<ReqRef
 Id="de3edf27-2461-48e2-9737-d2e812684d28"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="78c0d855-4bed-4282-81d2-d535267ef086"
>
</ReqRef><ReqRef
 Id="564c8eaf-9eff-4fcc-a1ab-b4c80a278e54"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="911483ad-7c6d-404d-b420-c2b4737ff4f3"
>
</ReqRef><ReqRef
 Id="cf125334-c2c0-4fcc-91c8-a060267517e1"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="60bdcfa5-1d22-4f41-abb5-945643f998ee"
>
</ReqRef><Comment>Tracks the reference location for reverse movement protection.
When the reverse movement protection is inactive, it is set to the unknown distance.</Comment>
</Variable><Variable
 Type="BaseTypes.Distance"
 DefaultValue="BaseTypes.Distance.Unknown"
 VariableMode="Internal"
 X="230"
 Y="10"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="StandstillSupervisionReferencePosition"
 Guid="db4385b9-84bc-4a68-8ff7-262f8ceaca96"
>
<ReqRef
 Id="c4a4386b-4dc3-4967-aaef-4485fe5a5adf"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="8eb3e88b-a570-4d73-a39a-ca16c1adc02d"
>
</ReqRef><ReqRef
 Id="b883cf61-7caf-4980-becb-9096c165864d"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="199093f4-cbe3-4142-b217-f63d3764c72a"
>
</ReqRef><Comment>Tracks the reference location for standstill supervision.
When the standstill supervision is inactive, it is set to the unknown distance.</Comment>
</Variable></Variables>
<Rules>
<Rule
 Priority="Processing"
 X="120"
 Y="360"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="Reverse movement protection"
 Guid="925775c0-43fd-4d27-8dee-a723000c8559"
>
<ReqRef
 Id="564c8eaf-9eff-4fcc-a1ab-b4c80a278e54"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="f80b0318-004f-473a-8b64-314f2ad9e4f3"
>
</ReqRef><ReqRef
 Id="356c897f-ec33-4240-8b7c-f795ee273d64"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="671b4468-4ccd-4c40-af0d-643645829593"
>
</ReqRef><ReqRef
 Id="cf125334-c2c0-4fcc-91c8-a060267517e1"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="f59bbf10-82ef-46c8-b775-48ba1885066d"
>
</ReqRef><Comment>Handles the reverse movement protection function.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="No reverse movement detected"
 Guid="ff067774-6620-4b1d-aebc-0b76dd47959d"
>
<Comment>If the reverse movement protection function is active, keep the current location as reference location as long as the train keeps moving forwards.</Comment>
<PreConditions>
<PreCondition
 Guid="f2a93777-1fe1-491b-a310-1971976bf15c"
>Kernel.ActiveFunctions.ProtectAgainstReverseMovement()</PreCondition><PreCondition
 Guid="239c0111-a2f7-42fc-9086-d938ac14c156"
>NOT Kernel.UndesirableMovement.ReverseMovementDetected(Kernel.UndesirableMovement.ReverseMovementReferencePosition)</PreCondition></PreConditions>
<Actions>
<Action
 Guid="79b16cfb-cc72-4039-a21f-1186a0ceeca8"
>Kernel.UndesirableMovement.ReverseMovementReferencePosition &lt;- Odometry.NominalDistance</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 Name="Handling reverse movement situation"
 Guid="180bfd4c-7d48-4485-b6fd-d5f8c00fd340"
>
<Comment>Depending on whether the reversedistance has been exceeded or not, the service brake should be applied or not.</Comment>
<PreConditions>
<PreCondition
 Guid="4f6c9237-5d9f-47b1-88be-b61516506a3c"
>Kernel.ActiveFunctions.ProtectAgainstReverseMovement()</PreCondition><PreCondition
 Guid="a2f73e40-2b66-4ee5-a491-0e1ac70bbc65"
>Kernel.UndesirableMovement.ReverseMovementDetected(Kernel.UndesirableMovement.ReverseMovementReferencePosition)</PreCondition><PreCondition
 Guid="f1e1e1b5-4431-4675-9594-1b40a1a62c4f"
>ReverseDistanceExceeded()</PreCondition></PreConditions>
<Actions>
</Actions>
<SubRules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Applying brakes"
 Guid="5026f2b9-cfb2-4dcd-a4f1-d698aa16587e"
>
<Comment>Applies brakes.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Applying brakes"
 Guid="34b1c322-eb9a-4613-bae9-dd6d3ee76490"
>
<Comment>Applies brakes if the reverse distance has been exceeded.</Comment>
<PreConditions>
<PreCondition
 Guid="27d209eb-61e5-421a-abfa-45da1c3f6740"
>Kernel.UndesirableMovement.MovementDetected()</PreCondition></PreConditions>
<Actions>
<Action
 Guid="c534b70e-481b-4dc6-8782-d5a0e030ab01"
>Kernel.BrakeCommands.CommandServiceBrake(BrakeCommands.BrakeReasonEnum.ReverseMovementProtection)</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 Name="Reset reference position after driver acknowledgement"
 Guid="7e5266ce-b56b-4b44-b580-e2097d50a5ad"
>
<ReqRef
 Id="de3edf27-2461-48e2-9737-d2e812684d28"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="122769f5-4665-45bd-ba33-9470ea096469"
>
</ReqRef><Comment>After acknowledgement by the driver and release of the brakes, the reference position shall be set at present train position.</Comment>
<PreConditions>
<PreCondition
 Guid="3708003e-027b-4ee8-bcb5-01b373a89b89"
>Odometry.TrainIsAtStandstill()</PreCondition><PreCondition
 Guid="67f60954-321a-4416-a800-d9e44ae19e10"
>FORALL X IN Kernel.BrakeCommands.ServiceBrakeCommands | X.Reason != BrakeCommands.BrakeReasonEnum.ReverseMovementProtection</PreCondition><PreCondition
 Guid="d2a392e6-fcb0-4902-b3ed-69df734d5e87"
>DMI.MasterDMI().Out_BrakeReason.OutputInformation.DisplayRequested == False</PreCondition><PreCondition
 Guid="77870667-47f1-4357-81ce-758eeae835a7"
>NOT TIU.Brakes.BrakeCommanded()</PreCondition></PreConditions>
<Actions>
<Action
 Guid="70cde7b1-38fa-4d34-9644-fe3b2eb819b4"
>Kernel.UndesirableMovement.ReverseMovementReferencePosition &lt;- Odometry.NominalDistance</Action></Actions>
</RuleCondition></Conditions>
</Rule></SubRules>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="230"
 Y="360"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="Standstill supervision"
 Guid="537f9151-0dfc-497f-8f6b-0998ab78b201"
>
<ReqRef
 Id="c4a4386b-4dc3-4967-aaef-4485fe5a5adf"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="f5abaef6-bbb5-4576-a079-88c3b7a367d5"
>
</ReqRef><ReqRef
 Id="b883cf61-7caf-4980-becb-9096c165864d"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="a24762d2-5053-4557-91d0-443c0919a0df"
>
</ReqRef><ReqRef
 Id="ade33b4f-310e-406d-b308-3be003251c25"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="d0144db1-3e31-45fc-98ba-28c19549cc31"
>
</ReqRef><Comment>Handles the standstill supervision function.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Initialize Standstill Supervision"
 Guid="2df0772c-8679-43fe-88be-e8ef74979b9e"
>
<ReqRef
 Id="e87c7aa6-0460-46c8-82ca-66eb5c47b2ae"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="cd02ccec-2a71-4c60-89d8-712182a1277a"
>
</ReqRef><Comment>Shall initialize the standstill supervision by setting the reference position to the nominal position.</Comment>
<PreConditions>
<PreCondition
 Guid="c9716104-f9d9-41d0-b9ed-2805bb0878c1"
>Kernel.ActiveFunctions.SuperviseStandstill()</PreCondition><PreCondition
 Guid="bdb72f72-fe69-44b6-b9a2-57ff797ff762"
>NOT TIU.Brakes.BrakeCommanded()</PreCondition><PreCondition
 Guid="ede31325-50d1-49ed-a398-f86e619b3c7c"
>Kernel.UndesirableMovement.StandstillSupervisionReferencePosition == BaseTypes.Distance.Unknown</PreCondition><PreCondition
 Guid="8c7c5875-c8a4-48d6-909f-ed944d28f30e"
>Kernel.UndesirableMovement.MovementDetected()</PreCondition></PreConditions>
<Actions>
<Action
 Guid="493a960e-5abd-4a09-bbe8-ec46511c74ef"
>Kernel.UndesirableMovement.StandstillSupervisionReferencePosition &lt;- Odometry.NominalDistance</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 Name="Activate standstill supervision"
 Guid="b5cdb86f-355b-470b-ae56-732df8feb980"
>
<Comment>If the stadstill supervision is active, and it has seen that the train moved too far, it activate the brakes. Rmk: CommandServiceBrake prevents inserting twice the same brake reason. Does not apply the brakes if the train is at standstill (implicitely cheked in StandstillDistanceExceeded).</Comment>
<PreConditions>
<PreCondition
 Guid="fd366256-6d69-49d3-a6f8-2649f21ee80b"
>Kernel.ActiveFunctions.SuperviseStandstill()</PreCondition><PreCondition
 Guid="af30998a-3c30-48e0-9180-d6c4605fe503"
>Kernel.UndesirableMovement.StandstillDistanceExceeded()</PreCondition></PreConditions>
<Actions>
<Action
 Guid="f6af442d-0105-4145-8995-0b16908289d8"
>Kernel.BrakeCommands.CommandServiceBrake(BrakeCommands.BrakeReasonEnum.SupervisingStandstill)</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 Name="Deactivate standstill supervision"
 Guid="32dff1b0-f265-475d-b54c-c632c3592624"
>
<Comment>If the staqndstill supervision function becomes inactive, reset the reference location.</Comment>
<PreConditions>
<PreCondition
 Guid="4265196d-7cfb-4131-852f-29322d24888b"
>Kernel.UndesirableMovement.StandstillSupervisionReferencePosition != BaseTypes.Distance.Unknown</PreCondition><PreCondition
 Guid="11a3ba35-439e-4115-a21b-1fe8697ba5f4"
>NOT Kernel.ActiveFunctions.SuperviseStandstill()</PreCondition></PreConditions>
<Actions>
<Action
 Guid="a584993d-4df5-4d15-9b17-5e1dd89d6b43"
>Kernel.UndesirableMovement.StandstillSupervisionReferencePosition &lt;- BaseTypes.Distance.Unknown</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="UpdateOUT"
 X="331"
 Y="1"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="Ask for acknowledgement"
 Guid="d56e63fc-0e31-4345-8978-bbb421970232"
>
<ReqRef
 Id="f4fbf115-c910-46e8-b6e7-bf1fb0f8a4b3"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="39fc52ac-e31d-4c5e-80a5-d70623fade8b"
>
</ReqRef><ReqRef
 Id="ba7f8c98-781f-404a-b7b8-e679b92c5448"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="0043b6a6-5115-47cf-ab6c-cf350c29478e"
>
</ReqRef><Comment>The driver has to acknowledge when the train is at standstill.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Ask for driver acknowledgement"
 Guid="263dedae-1bf6-4e3f-a161-29d6553de33c"
>
<ReqRef
 Id="19625797-aac0-439f-95cc-90c2272fe103"
 SpecId="7976a642-eab5-431b-a656-44fc19d26d62"
 Guid="643732f2-0f8c-4722-ac83-130749382623"
>
</ReqRef><ReqRef
 Id="ba7f8c98-781f-404a-b7b8-e679b92c5448"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="d55d2109-6f0f-4374-a1e8-d1ee11101f01"
>
</ReqRef><PreConditions>
<PreCondition
 Guid="721cd70e-b818-42be-aa85-d90586c9c1d2"
>Odometry.TrainIsAtStandstill()</PreCondition><PreCondition
 Guid="57c78cfc-03c2-448c-81a7-448e418cd737"
>Available(Kernel.BrakeCommands.ServiceBrakeCommands)</PreCondition></PreConditions>
<Actions>
</Actions>
<SubRules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Standstill supervision acknowledgement"
 Guid="1fe98808-0a86-4111-b4b2-1bb15557109b"
>
<Comment>Standstill supervision specificities.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Standstill supervision"
 Guid="d42110f0-8ca0-4d2c-9155-7d52a02719a1"
>
<PreConditions>
<PreCondition
 Guid="17d91e30-618f-4463-bfa1-84ad031ecbfe"
>Kernel.ActiveFunctions.SuperviseStandstill()</PreCondition><PreCondition
 Guid="d123bae0-fd7a-4496-b658-b468d9603d82"
>THERE_IS X IN Kernel.BrakeCommands.ServiceBrakeCommands | X.Reason == BrakeCommands.BrakeReasonEnum.SupervisingStandstill</PreCondition><PreCondition
 Guid="639be53c-8c8c-46ef-9fb4-2460a5690913"
>DMI.MasterDMI().In_AcknForStandstillSupervision.InputInformation.RequestStatus == RequestEnum.Disabled AND FORALL X IN DMI.IN.Acknowledgements.Acknowledgements | X.Type != DMI.IN.Acknowledgements.AckTypeEnum.StandstillSupervision</PreCondition><PreCondition
 Guid="6b176fa5-fa74-4009-930d-fa911e5944d6"
>Kernel.UndesirableMovement.StandstillSupervisionReferencePosition != BaseTypes.Distance.Unknown</PreCondition></PreConditions>
<Actions>
<Action
 Guid="8a6b3eef-c48c-4582-944b-9de1cdc8b635"
>DMI.MasterDMI().In_AcknForStandstillSupervision.InitiateRequest()</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Roll away protection acknowledgement"
 Guid="f1fd430f-40d1-458a-9a5a-bb6cbf45f888"
>
<Comment>Roll away protection specificities.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Roll away protection"
 Guid="c4f6b2bb-2064-49b1-bb1a-96c7a073c657"
>
<PreConditions>
<PreCondition
 Guid="8180225c-f9e7-4536-b21d-83fa1996249b"
>ActiveFunctions.ProtectAgainstRollAwayMovement()</PreCondition><PreCondition
 Guid="79b64615-021c-461f-922b-70211add0563"
>THERE_IS X IN Kernel.BrakeCommands.ServiceBrakeCommands | X.Reason == BrakeCommands.BrakeReasonEnum.RollAwayProtection</PreCondition><PreCondition
 Guid="50f77114-17c7-4b24-8640-58273ce3b188"
>DMI.MasterDMI().In_AcknForRollAwayProtection.InputInformation.RequestStatus == RequestEnum.Disabled AND FORALL X IN DMI.IN.Acknowledgements.Acknowledgements | X.Type != DMI.IN.Acknowledgements.AckTypeEnum.RollAwayProtection</PreCondition><PreCondition
 Guid="52b70b3f-eb59-4ab3-825e-16ad66356ba5"
>RollAwayMovementReferencePosition != BaseTypes.Distance.Unknown</PreCondition></PreConditions>
<Actions>
<Action
 Guid="38b4c99e-5131-4be3-b9ef-9e6d179aaa3e"
>DMI.MasterDMI().In_AcknForRollAwayProtection.InitiateRequest()</Action></Actions>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Reverse movement protection acknowledgement"
 Guid="43c432a6-95f8-4553-93b7-f168a22a9f5b"
>
<Comment>Reverse movement protection specificities.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Reverse movement protection"
 Guid="501b712a-032e-4543-ba81-c72ee68e017c"
>
<PreConditions>
<PreCondition
 Guid="ceb0e655-6a89-4765-9708-fb7e4e0dad90"
>Kernel.ActiveFunctions.ProtectAgainstReverseMovement()</PreCondition><PreCondition
 Guid="c8234130-9c13-4619-a14b-7d643d0a9165"
>THERE_IS X IN Kernel.BrakeCommands.ServiceBrakeCommands | X.Reason == BrakeCommands.BrakeReasonEnum.ReverseMovementProtection</PreCondition><PreCondition
 Guid="9fecd08d-fe6b-4d63-8994-857c5f6198a1"
>DMI.MasterDMI().In_AcknForReverseMovementProtection.InputInformation.RequestStatus == RequestEnum.Disabled AND FORALL X IN DMI.IN.Acknowledgements.Acknowledgements | X.Type != DMI.IN.Acknowledgements.AckTypeEnum.ReverseMovementProtection</PreCondition><PreCondition
 Guid="b5c0c710-6f12-46ac-8a3b-fb0f0df2a53c"
>Kernel.UndesirableMovement.ReverseMovementReferencePosition!= BaseTypes.Distance.Unknown</PreCondition></PreConditions>
<Actions>
<Action
 Guid="b3ca7842-6e1a-4c54-a6f7-bf8c419a9b3f"
>DMI.MasterDMI().In_AcknForReverseMovementProtection.InitiateRequest()</Action></Actions>
</RuleCondition></Conditions>
</Rule></SubRules>
</RuleCondition></Conditions>
</Rule><Rule
 Priority="Processing"
 X="441"
 Y="1"
 Width="100"
 Height="50"
 Implemented="TRUE"
 Name="Roll away protection"
 Guid="7b0a5686-f01f-4452-ad73-92ce382f5a43"
>
<ReqRef
 Id="6f89de18-e407-4737-90cf-efd9d8a3b178"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="8894fbf5-3d3f-4ec9-91df-b73fc5e64ddb"
>
</ReqRef><ReqRef
 Id="507e945d-af5e-4721-af02-3f87008198c9"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="20417912-5373-4e8b-8432-70afeb1e5b76"
>
</ReqRef><Comment>Handles the roll away situations.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="No roll away movement detected"
 Guid="9b319d79-67d0-4c97-bf9e-33fb1af440ae"
>
<Comment>If no roll away, the reference position shall be set at the present train position.</Comment>
<PreConditions>
<PreCondition
 Guid="00235ef9-59d2-4a62-b4ed-8bd0bcc3d769"
>ActiveFunctions.ProtectAgainstRollAwayMovement()</PreCondition><PreCondition
 Guid="0a7ce73f-8f50-48a6-a4a8-425d5f20c5a1"
>NOT Kernel.UndesirableMovement.RollAwayMovementDetected(Kernel.UndesirableMovement.RollAwayMovementReferencePosition)</PreCondition></PreConditions>
<Actions>
<Action
 Guid="244ec5bb-c453-4023-89e1-d56ab26c0f13"
>Kernel.UndesirableMovement.RollAwayMovementReferencePosition &lt;- Odometry.NominalDistance</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 Name="Handling roll away movement situation"
 Guid="3b5d89ee-1cce-41e4-9f2e-f93046ef0bb1"
>
<ReqRef
 Id="1058129e-e8d2-4dda-992f-3f44ebb4a754"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="f6dffc46-0407-472e-bed6-ada904d70385"
>
</ReqRef><Comment>Handles roll away situations.</Comment>
<PreConditions>
<PreCondition
 Guid="80a27b77-a7db-4048-a032-bf4aa4e1e85d"
>Kernel.ActiveFunctions.ProtectAgainstRollAwayMovement()</PreCondition><PreCondition
 Guid="b932cf16-df5d-43e2-ae8a-ba1aa2c6ac4e"
>Kernel.UndesirableMovement.RollAwayMovementDetected(Kernel.UndesirableMovement.RollAwayMovementReferencePosition)</PreCondition><PreCondition
 Guid="6b6e2b90-b7c2-432e-a51b-ec5e180d7043"
>RollAwayDistanceExceeded()</PreCondition></PreConditions>
<Actions>
</Actions>
<SubRules>
<Rule
 Priority="Processing"
 Implemented="TRUE"
 Name="Applying brakes"
 Guid="289981f5-2b4c-46e4-ba9f-c9204f5492d3"
>
<Comment>Applies brakes.</Comment>
<SubRules></SubRules>
<Conditions>
<RuleCondition
 Implemented="TRUE"
 Name="Applying brakes"
 Guid="916b925f-96f0-4833-85d7-775d84291cfc"
>
<ReqRef
 Id="1058129e-e8d2-4dda-992f-3f44ebb4a754"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="7cf4a305-d233-4c82-8490-a16f9d8b9f7e"
>
</ReqRef><Comment>Applies brakes if the roll away distance has been exceeded.</Comment>
<PreConditions>
<PreCondition
 Guid="605d3828-c54e-489c-96f3-529653e12d05"
>Kernel.UndesirableMovement.MovementDetected()</PreCondition></PreConditions>
<Actions>
<Action
 Guid="b1243751-1d52-4bdf-a962-851687ab5c62"
>Kernel.BrakeCommands.CommandServiceBrake(BrakeCommands.BrakeReasonEnum.RollAwayProtection)</Action></Actions>
</RuleCondition><RuleCondition
 Implemented="TRUE"
 Name="Reset reference position after driver acknowledgement"
 Guid="205d5af0-20ba-46dd-b02a-e6faf8ce8c7e"
>
<ReqRef
 Id="5b878cb7-bb66-41bb-96dc-6089f53c8f01"
 SpecId="1725280b-f696-4860-94cc-d85f62c35214"
 Guid="c6b7d23f-43f8-4a1f-84ea-5c2e72b4ad9f"
>
</ReqRef><Comment>After acknowledgement by the driver and release of the brakes, the reference position shall be set at present train position.</Comment>
<PreConditions>
<PreCondition
 Guid="1b3f7f9f-2dee-4322-880e-c97c0baad847"
>Odometry.TrainIsAtStandstill()</PreCondition><PreCondition
 Guid="04f65081-e63f-4ba8-872f-7f8dde688fa9"
>FORALL X IN Kernel.BrakeCommands.ServiceBrakeCommands | X.Reason != BrakeCommands.BrakeReasonEnum.RollAwayProtection</PreCondition><PreCondition
 Guid="100c2586-6faa-4a16-a703-85bc8fe75d7e"
>DMI.MasterDMI().Out_BrakeReason.OutputInformation.DisplayRequested == False</PreCondition><PreCondition
 Guid="9bfc1cb4-321d-4a9e-8549-9bd3147d9037"
>NOT TIU.Brakes.BrakeCommanded()</PreCondition></PreConditions>
<Actions>
<Action
 Guid="63908923-22d9-455a-807a-32bd03e4a077"
>Kernel.UndesirableMovement.RollAwayMovementReferencePosition &lt;- Odometry.NominalDistance</Action></Actions>
</RuleCondition></Conditions>
</Rule></SubRules>
</RuleCondition></Conditions>
</Rule></Rules>
</NameSpace>
